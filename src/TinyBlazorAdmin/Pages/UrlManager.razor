@page "/urlmanager"

@using Microsoft.AspNetCore.Authorization
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Grids
@using Cloud5mins.AzShortener
@inject HttpClient Http

<PageTitle>Url Manager</PageTitle>

<h1>Url Manager</h1>

@if (urls.UrlList == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <button class="btn btn-primary"
            @onclick="CreateShortUrl">
        Add New Url
    </button>

    <SfGrid DataSource="@urls.UrlList" id="grdUrls" AllowPaging="true" AllowSorting="true" AllowFiltering="true" >
        <GridPageSettings PageSize="15"></GridPageSettings>
        <GridColumns>
                @* <GridColumn Width="80">
                    <Template>
                        @{
                            var url = (context as ShortUrlEntity);
                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => CopyToClipboardAsync(url.ShortUrl))">Copy</button>
                        }
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="Schedule(s)">
                    <Template>
                        @{
                            var url = (context as ShortUrlEntity);
                            if(url.Schedules != null){
                                <span>@url.Schedules.Count</span>
                            }
                            else
                            {
                                <span>0</span>
                            };
                        }
                    </Template>
                </GridColumn> *@
                <GridColumn Field=@nameof(ShortUrlEntity.RowKey) HeaderText="Vanity">
                    <Template>
                        @{
                            var url = (context as ShortUrlEntity);
                            <a href="https://@url.ShortUrl" target="blank">@url.RowKey</a>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(ShortUrlEntity.Title) HeaderText="Title" ></GridColumn>
                <GridColumn Field=@nameof(ShortUrlEntity.Url) HeaderText="Url" ></GridColumn>
                <GridColumn Field=@nameof(ShortUrlEntity.Clicks) HeaderText="Clicks" >
                    <Template>
                        @{
                            var url = (context as ShortUrlEntity);
                            <span>@url.Clicks</span>   
                            @* <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => NavigateToStats(url.RowKey))">ðŸ“Š</button> *@
                        }
                    </Template>
                </GridColumn>
                @* <GridColumn Width="70">
                    <Template>
                        @{
                            var url = (context as ShortUrlEntity);
                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => EditShortUrl(url))">Edit</button>
                        }
                    </Template>
                </GridColumn> *@
                @* <GridColumn Width="70">
                    <Template>
                        @{
                            var url = (context as ShortUrlEntity);
                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => ArchiveShortUrl(url))">Archive</button>
                        }
                    </Template>
                </GridColumn> *@
            </GridColumns>
    </SfGrid>
}


@if (ShowCreatePopup)
{
    <div class="modal fade show" id="createPopup" style="display:block" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">

                <!-- Modal Header -->
                <div class="modal-header">
                    <h4 class="modal-title">Short Url Request</h4>
                    <button type="button" class="close" @onclick="@ClosePopup">&times;</button>
                </div>

                <!-- Modal body -->
                <div class="modal-body">
                        <EditForm Model="shortUrlRequest" OnValidSubmit="SaveShortUrl">
                            <DataAnnotationsValidator />                        
                            <div class="row">
                                <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                                    <SfTextBox id="title" Placeholder="Title" FloatLabelType="@FloatLabelType.Auto" @bind-Value="shortUrlRequest.Title"></SfTextBox>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                                    <SfTextBox id="url" Placeholder="Url" FloatLabelType="@FloatLabelType.Auto" @bind-Value="shortUrlRequest.Url"></SfTextBox>
                                    <ValidationMessage For="@(() => shortUrlRequest.Url)" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-xs-12 col-sm-12 col-lg-12 col-md-12">
                                    <SfTextBox id="vanity" Placeholder="Vanity" FloatLabelType="@FloatLabelType.Auto" @bind-Value="shortUrlRequest.Vanity"></SfTextBox>
                                </div>
                            </div>

                            <div>
                                <SchedulesComponent schedules="shortUrlRequest.Schedules"></SchedulesComponent>
                            </div>
                        </EditForm>
                </div>

                <!-- Modal footer -->
                <div class="modal-footer">
                    <button type="button" class="btn" @onclick="@ClosePopup">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick=@SaveShortUrl>Save</button>
                </div>

            </div>
        </div>
    </div>

}



@code {
    bool ShowCreatePopup = false;
    private ListResponse urls = new ListResponse();
    ShortUrlRequest shortUrlRequest = new ShortUrlRequest();
    SfGrid<ShortUrlEntity> grdUrls;
    public List<ShortUrlEntity> gridData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            urls = await Http.GetFromJsonAsync<ListResponse>("/api/UrlList") ?? new ListResponse();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task SaveShortUrl()
    {
        ShowCreatePopup = false;

        @* try
        {
            await Http.GetFromJsonAsync<ListResponse>("/api/CreateShortUrl") ;
            await UpdateUIList();
        }
        catch (System.Exception)
        {
            Console.WriteLine(ex.ToString());
        }
        grdUrls.ClearFiltering();
        grdUrls.FilterByColumn("RowKey", "equal", shortUrlRequest.Vanity); *@
    }

    void ClosePopup()
    {
        ShowCreatePopup = false;
        //ShowEditPopup = false;
    }

    [Authorize(Roles = "admin")]
    void CreateShortUrl()
    {
        shortUrlRequest = new ShortUrlRequest();
        ShowCreatePopup = true;
    }
}
